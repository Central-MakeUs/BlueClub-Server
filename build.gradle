buildscript {
	ext {
		restdocsApiSpecVersion = '0.17.1'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'

	// RestDocs
	id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"

	// Swagger
	id 'org.hidetake.swagger.generator' version '2.18.2'
}

group = 'blueclub'
version = '1.1.2-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

swaggerSources {
	sample {
		setInputFile(file("build/api-spec/index.yaml"))
		code {
			language = 'spring'
		}
	}
}

openapi3 {
	servers = [
			{ url = "https://www.blueclubserver.shop" },
			{ url = "http://localhost:8080" }
	]
	title = "BlueClub Swagger UI"
	description = "BlueClub Spring REST Docs with Swagger UI."
	version = "1.1.2"
	format = "yaml"
	outputFileNamePrefix = 'index'
}

task swaggerConfig {
	dependsOn 'openapi3'
	doFirst {
		def swaggerUIFile = file('build/api-spec/index.yaml')
		def newSwaggerUIFile = new File('build/api-spec/new.yaml')

		def securitySchemesContent =  "  securitySchemes:\n" +  \
                                      "    Authorization:\n" +  \
                                      "      type: apiKey\n" +  \
                                      "      name: Authorization\n" +  \
                                      "      in: header\n" + \
									  "    Authorization-refresh:\n" +  \
                                      "      type: apiKey\n" +  \
                                      "      name: Authorization-refresh\n" +  \
                                      "      in: header\n" + \
                                      "security:\n" +
									  "  - Authorization: []\n" + \
 									  "    Authorization-refresh: []\n"

		swaggerUIFile.append(securitySchemesContent)

		def UpdateProfileImage =
				"""
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  description: 프로필 사진
                  type: string
                  format: binary
"""

		def PostDiaryQueryContent =
				"""
      parameters:
      - name: job
        in: query
        description: "[필수] 직업명 (골프 캐디, 배달 라이더, 일용직 근로자)"
        required: true
        schema:
          type: string
"""

		def PostDiaryContent =
				"""
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                dto:
                  type: object
                  description: 근무 일지 DTO
                  example:
                    worktype: 근무
                    memo: memo1
                    income: 200000
                    expenditure: 0
                    saving: 0
                    date: 2024-01-25
                    imageUrlList: null
                    rounding: 3
                    caddyFee: 200000
                    overFee: 0
                    topdressing: true
                image:
                  type: string
                  description: 사진
                  format: binary
"""

		def PostDiaryDTOContent =
				"""
    UpdateCaddyDiaryRequest:
      title: UpdateCaddyDiaryRequest
      type: object
      description: 골프 캐디 근무 일지 DTO
      properties:
        worktype:
          type: string
          description: "[필수] 근무 형태 (근무, 조퇴, 휴무)"
        memo:
          type: string
          description: "메모"
        income:
          type: number
          description: "[필수] 총 수입"
        expenditure:
          type: number
          description: "지출액"
        saving:
          type: number
          description: "저축액"
        date:
          type: string
          description: "[필수] 근무 일자 // 형식 : yyyy-mm-dd"
        imageUrlList:
          type: string
          description: "기존 이미지 URL 리스트 (or null)"
        rounding:
          type: number
          description: "[필수] 라운딩 수"
        caddyFee:
          type: number
          description: "[필수] 캐디피 수입"
        overFee:
          type: number
          description: "오버피 수입"
        topdressing:
          type: boolean
          description: "배토 여부"
    UpdateRiderDiaryRequest:
      title: UpdateRiderDiaryRequest
      type: object
      description: 배달 라이더 근무 일지 DTO
      properties:
        worktype:
          type: string
          description: "[필수] 근무 형태 (근무, 조퇴, 휴무)"
        memo:
          type: string
          description: "메모"
        income:
          type: number
          description: "[필수] 총 수입"
        expenditure:
          type: number
          description: "지출액"
        saving:
          type: number
          description: "저축액"
        date:
          type: string
          description: "[필수] 근무 일자 // 형식 : yyyy-mm-dd"
        imageUrlList:
          type: string
          description: "기존 이미지 URL 리스트 (or null)"
        numberOfDeliveries:
          type: number
          description: "[필수] 배달 건수"
        incomeOfDeliveries:
          type: number
          description: "[필수] 배달 수입"
        numberOfPromotions:
          type: number
          description: "프로모션 건수"
        incomeOfPromotions:
          type: number
          description: "프로모션 수입"
    UpdateDayworkerDiaryRequest:
      title: UpdateDayworkerDiaryRequest
      type: object
      description: 일용직 근로자 근무 일지 DTO
      properties:
        worktype:
          type: string
          description: "[필수] 근무 형태 (근무, 조퇴, 휴무)"
        memo:
          type: string
          description: "메모"
        income:
          type: number
          description: "[필수] 총 수입"
        expenditure:
          type: number
          description: "지출액"
        saving:
          type: number
          description: "저축액"
        date:
          type: string
          description: "[필수] 근무 일자 // 형식 : yyyy-mm-dd"
        imageUrlList:
          type: string
          description: "기존 이미지 URL 리스트 (or null)"
        place:
          type: string
          description: "[필수] 현장명"
        dailyWage:
          type: number
          description: "[필수] 일급"
        typeOfJob:
          type: string
          description: "직종"
        numberOfWork:
          type: number
          description: "공수"
    UpdateDayOffDiaryRequest:
      title: UpdateDayOffDiaryRequest
      type: object
      description: 휴무일 때 근무 일지 DTO
      properties:
        worktype:
          type: string
          description: "[필수] 근무 형태 (근무, 조퇴, 휴무)"
        date:
          type: string
          description: "[필수] 근무 일자 // 형식 : yyyy-mm-dd"
"""

		def line = ""
		def outputStream = new FileOutputStream(newSwaggerUIFile)
		def writer = new PrintWriter(outputStream)
		def inputStream = new FileInputStream(swaggerUIFile)
		def reader = new BufferedReader(new InputStreamReader(inputStream))

		while ((line = reader.readLine()) != null) {
			if (line == "  securitySchemes:")
				writer.print(PostDiaryDTOContent)
			writer.println(line)
			if (line == "      operationId: Save")
				writer.print(PostDiaryQueryContent)
			if (line == "      operationId: Save" || line == "      operationId: Update")
				writer.print(PostDiaryContent)
			if (line == "      operationId: UpdateProfileImage")
				writer.print(UpdateProfileImage)
		}
		writer.flush()
		writer.close()
		inputStream.close()

		swaggerUIFile.delete()
		newSwaggerUIFile.renameTo(swaggerUIFile)
		newSwaggerUIFile.delete()
	}
	finalizedBy 'copyConfig'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencies {
	// Web
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// OAuth & JWT
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-config:6.0.2'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	runtimeOnly 'com.auth0:java-jwt:4.2.1'
	implementation 'com.auth0:java-jwt:4.2.1'

	// Validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.projectlombok:lombok:1.18.26'

	// DB
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'com.h2database:h2'

	// Redis
	implementation 'it.ozimov:embedded-redis:0.7.2'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// AWS S3
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'io.findify:s3mock_2.13:0.2.6'

	// Rest Docs & Swagger
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:' + restdocsApiSpecVersion
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'
	swaggerUI 'org.webjars:swagger-ui:4.18.1'

	// Slack
	implementation 'com.slack.api:slack-api-client:1.29.0'

	// Querydsl
	implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
	implementation "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// Firebase
	implementation 'com.google.firebase:firebase-admin:9.1.1'

	// Emoji
	implementation 'com.vdurmont:emoji-java:5.1.1'

	// Rate Limit
	implementation 'com.bucket4j:bucket4j-core:8.3.0'

	compileOnly 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	implementation 'org.apache.commons:commons-collections4:4.0'
}

def querydslSrcDir = 'src/main/generated'
sourceSets {
	main {
		java {
			srcDirs += [ querydslSrcDir ]
		}
	}
}

compileJava {
	options.compilerArgs << '-Aquerydsl.generatedAnnotationClass=javax.annotation.Generated'
}

tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(querydslSrcDir)
}

clean {
	delete file(querydslSrcDir)
}

tasks.named('test') {
	useJUnitPlatform()
}

task copyConfig {
	doLast {
		copy {
			from 'build/api-spec'
			into 'build/resources/main/static/docs'
		}
		copy {
			from 'build/resources/main/static/docs'
			into 'src/main/resources/static/docs'
		}
	}
}

bootJar {
	dependsOn 'swaggerConfig'
}